norm(1000)
rnorm(1000)
rnorm(1000) * 100 * (100 - 20)
?rnorm
rnorm(1000)*(100-20) + 20
x <- rnorm(100, mean = 50)*(100-20) + 20
x
rnorm(100, mean = 50)
rnorm(100, mean = 50) * (100 - 20) + 20
rnorm(100, mean = 50, sd = 40)
rnorm(1000, mean = 500, sd = 100)
x <- rnorm(1000, mean = 500, sd = 100)
plot(x)
hist(x)
x <- rnorm(1000, mean = 500, sd = 50)
hist(x)
?hist
}
}
}
}
rtvsfunc <- function(n = 1000){ x <- rnorm(n, mean = 500, sd = 50) return(TRUE) }
rtvsfunx(50)
rtvsfunc(50)
rtvs::debug_source("script.R")
rtvs::debug_source("script.R")
rtvs::debug_source("script.R")
rtvsfunc(50)
rtvsfunc(5000)
rtvs::debug_source("script.R")
debug(rtvs)
debug(rtvsfunc)
rtvsfunc(100)
ls()
n
n
n
n
rtvsfunc(100)
print(n)
n <-111
print(n)
n
n
Q
rtvsfunc
rtvsfunc <- function(n = 1000){ x <- rnorm(n, mean = 500, sd = 50) h <- hist(x)     browser() return(h)}
rtvsfunc
rtvsfunc
rtvsfunc(40)
Q
rtvs::debug_source("script.R")
n
rtvs::debug_source("script.R")
h
print(h)
print(n)
return(n)}
source("~/Visual Studio 2015/Projects/RTVS Demo/RTVS Demo/script.R", encoding = "windows-1251")
rtvs
rtvsfunc(10)
print(n)
print(n)
Q
source("~/Visual Studio 2015/Projects/RTVS Demo/RTVS Demo/script.R", encoding = "windows-1251")
options(error=browser())
print(n)
Q
options(error=browser)
source("~/Visual Studio 2015/Projects/RTVS Demo/RTVS Demo/script.R", encoding = "windows-1251")
rtvsfunc(9)
k
k
print(k)
Q
options(error=NULL)
## Demonstrates the speed differences in matrix calculations
## across R, Microsoft R Open (MRO), and Microsoft R Server (MRS).
# To learn more about the differences among R, MRO and MRS, refer to:
# https://github.com/lixzhang/R-MRO-MRS
# Run the following code on R, MRO, and MRS and 
# notice the speed improvement with MRO and MRS over R.
# The code in this section can be found at the following address:
# https://mran.revolutionanalytics.com/documents/rro/multithread/#mt-bench
cat("-----------------------------------------------------------------\n",
    "This is a big calculation and may take a few minutes to run. \n")
# print the default number of threads if MKL library is installed
if (require("RevoUtilsMath")) {
    print(paste("The number of threads is:", getMKLthreads()))
    }
# Initialization
set.seed(1)
m <- 10000
n <- 5000
A <- matrix(runif(m * n), m, n)
# Matrix multiply
system.time(B <- crossprod(A))
# Cholesky Factorization
system.time(C <- chol(B))
# Singular Value Decomposition
m <- 10000
n <- 2000
A <- matrix(runif(m * n), m, n)
system.time(S <- svd(A, nu = 0, nv = 0))
# Principal Components Analysis
m <- 10000
n <- 2000
A <- matrix(runif(m * n), m, n)
system.time(P <- prcomp(A))
# Linear Discriminant Analysis
library("MASS")
g <- 5
k <- round(m / 2)
A <- data.frame(A, fac = sample(LETTERS[1:g], m, replace = TRUE))
train <- sample(1:m, k)
system.time(L <- lda(fac ~ ., data = A, prior = rep(1, g) / g, subset = train))
cat("-----------------------------------------------------------------\n",
    "Save the time and run the code on R, MRO and MRS to compare speed.")
rnorm(100, mean = 50, sd = 40)
#Demo 2. Matrix Calc #################################################
## Demonstrates the speed differences in matrix calculations
## across R, Microsoft R Open (MRO), and Microsoft R Server (MRS).
# To learn more about the differences among R, MRO and MRS, refer to:
# https://github.com/lixzhang/R-MRO-MRS
# Run the following code on R, MRO, and MRS and 
# notice the speed improvement with MRO and MRS over R.
# The code in this section can be found at the following address:
# https://mran.revolutionanalytics.com/documents/rro/multithread/#mt-bench
cat("-----------------------------------------------------------------\n",
    "This is a big calculation and may take a few minutes to run. \n")
# print the default number of threads if MKL library is installed
if (require("RevoUtilsMath")) {
    print(paste("The number of threads is:", getMKLthreads()))
}
# Initialization
set.seed(1)
m <- 10000
n <- 5000
A <- matrix(runif(m * n), m, n)
# Matrix multiply
system.time(B <- crossprod(A))
# Cholesky Factorization
system.time(C <- chol(B))
# Singular Value Decomposition
m <- 10000
n <- 2000
A <- matrix(runif(m * n), m, n)
system.time(S <- svd(A, nu = 0, nv = 0))
# Principal Components Analysis
m <- 10000
n <- 2000
A <- matrix(runif(m * n), m, n)
system.time(P <- prcomp(A))
# Linear Discriminant Analysis
library("MASS")
g <- 5
k <- round(m / 2)
A <- data.frame(A, fac = sample(LETTERS[1:g], m, replace = TRUE))
train <- sample(1:m, k)
system.time(L <- lda(fac ~ ., data = A, prior = rep(1, g) / g, subset = train))
cat("-----------------------------------------------------------------\n",
    "Save the time and run the code on R, MRO and MRS to compare speed.")
rtvs::debug_source("~/Visual Studio 2015/Projects/RTVS Demo/RTVS Demo/02. MatrixOps.R", encoding = "windows-1251")
source("~/Visual Studio 2015/Projects/RTVS Demo/RTVS Demo/02. MatrixOps.R", echo = TRUE, encoding = "windows-1251")
